# scheduler/trigger.py

import sys
import os
import logging
from dotenv import load_dotenv
from telegram import Bot
from openai import OpenAI
from utils.post_utils import send_post_to_telegram
import httpx

# ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
print("‚úÖ trigger.py –∑–∞–ø—É—â–µ–Ω")
logging.basicConfig(level=logging.INFO)
logging.info("‚úÖ trigger.py –∑–∞–ø—É—â–µ–Ω (–ª–æ–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)")

# üìÇ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–≤ –ª–æ–≥–∞—Ö Render —É–≤–∏–¥–∏—à—å)
print(f"üîë TELEGRAM_TOKEN = {bool(TELEGRAM_TOKEN)}")
print(f"üîë OPENAI_API_KEY = {bool(OPENAI_API_KEY)}")
print(f"üîë TARGET_CHAT_ID = {TARGET_CHAT_ID}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
assert TELEGRAM_TOKEN, "‚õî TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"
assert OPENAI_API_KEY, "‚õî OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω"
assert TARGET_CHAT_ID, "‚õî TARGET_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
timeout_config = httpx.Timeout(60.0, connect=10.0)
openai_client = OpenAI(api_key=OPENAI_API_KEY, timeout=timeout_config)
telegram_bot = Bot(token=TELEGRAM_TOKEN)

def run():
    try:
        print("‚ñ∂Ô∏è –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é run()")
        logging.info("‚ñ∂Ô∏è –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é run()")

        send_post_to_telegram(
            client=openai_client,
            bot=telegram_bot,
            chat_id=int(TARGET_CHAT_ID)
        )

        print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        logging.info("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    run()
