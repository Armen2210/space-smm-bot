# scheduler/trigger.py

import os
import sys
import logging
import httpx
from dotenv import load_dotenv
from telegram import Bot
from openai import OpenAI

# === üìÇ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH ===
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)

# ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
print("‚úÖ trigger.py –∑–∞–ø—É—â–µ–Ω", flush=True)
logging.basicConfig(level=logging.INFO)
logging.info("‚úÖ trigger.py –∑–∞–ø—É—â–µ–Ω (–ª–æ–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç)")

# === üì¶ –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–∏ ===
from utils.post_utils import send_post_to_telegram

# === üîê –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")

print(f"üîë TELEGRAM_TOKEN: {bool(TELEGRAM_TOKEN)}", flush=True)
print(f"üîë OPENAI_API_KEY: {bool(OPENAI_API_KEY)}", flush=True)
print(f"üîë TARGET_CHAT_ID: {TARGET_CHAT_ID}", flush=True)

assert TELEGRAM_TOKEN, "‚õî TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"
assert OPENAI_API_KEY, "‚õî OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω"
assert TARGET_CHAT_ID, "‚õî TARGET_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω"

# === ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
timeout_config = httpx.Timeout(60.0, connect=10.0)
openai_client = OpenAI(api_key=OPENAI_API_KEY, timeout=timeout_config)
telegram_bot = Bot(token=TELEGRAM_TOKEN)


# === üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def run():
    try:
        print("‚ñ∂Ô∏è –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é run()", flush=True)
        logging.info("‚ñ∂Ô∏è –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é run()")

        print("üì§ –í—ã–∑–æ–≤ send_post_to_telegram()", flush=True)
        send_post_to_telegram(
            client=openai_client,
            bot=telegram_bot,
            chat_id=int(TARGET_CHAT_ID)
        )

        print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.", flush=True)
        logging.info("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}", flush=True)
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")


# === üü¢ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    run()
