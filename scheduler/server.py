# scheduler/server.py

import os
import subprocess
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

@app.route('/publish', methods=['POST'])
def publish_post():
    try:
        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ—Ç IP: {request.remote_addr}")
        # üëá –ü–µ—Ä–µ–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ subprocess
        env = os.environ.copy()

        result = subprocess.run(
            ["python3", os.path.join(os.path.dirname(__file__), "trigger.py")],
            check=True,
            timeout=60,
            capture_output=True,
            text=True,
            env=env  # üëà –ø–µ—Ä–µ–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ—á–µ—Ä–Ω–µ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É
        )
        logging.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞: {result.stdout.strip()}")
        return jsonify({"status": "ok", "message": "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"}), 200

    except subprocess.CalledProcessError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ trigger.py: {e.stderr.strip()}")
        return jsonify({"status": "error", "message": str(e.stderr)}), 500

    except subprocess.TimeoutExpired:
        logging.error("‚è± –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è trigger.py")
        return jsonify({"status": "error", "message": "Timeout –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ trigger.py"}), 504

@app.route('/', methods=['GET'])
def home():
    return "üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)