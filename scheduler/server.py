# scheduler/server.py
import os
import sys
import logging
import asyncio
from flask import Flask, request, jsonify
from dotenv import load_dotenv
import httpx

# === üìÇ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH ===
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, BASE_DIR)

from telegram import Bot
from openai import OpenAI
from utils.post_utils import send_post_to_telegram_async  # ‚ö†Ô∏è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")
PUBLISH_SECRET = os.getenv("PUBLISH_SECRET")

# –ü—Ä–æ–≤–µ—Ä–∫–∞
assert TELEGRAM_TOKEN, "‚õî TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω"
assert OPENAI_API_KEY, "‚õî OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω"
assert TARGET_CHAT_ID, "‚õî TARGET_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω"
assert PUBLISH_SECRET, "‚õî PUBLISH_SECRET –Ω–µ –∑–∞–¥–∞–Ω"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
timeout_config = httpx.Timeout(60.0, connect=10.0)
openai_client = OpenAI(api_key=OPENAI_API_KEY, timeout=timeout_config)
telegram_bot = Bot(token=TELEGRAM_TOKEN)

@app.route('/publish', methods=['POST'])
def publish_post():
    # === üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===
    token = request.headers.get("X-Auth-Token")
    if token != PUBLISH_SECRET:
        logging.warning("‚õî –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
        return jsonify({"status": "error", "message": "Unauthorized"}), 403

    try:
        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç IP: {request.remote_addr}")

        # ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        asyncio.run(send_post_to_telegram_async(
            client=openai_client,
            bot=telegram_bot,
            chat_id=int(TARGET_CHAT_ID)
        ))

        logging.info("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
        return jsonify({"status": "ok", "message": "–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"}), 200

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/', methods=['GET'])
def home():
    return "üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
