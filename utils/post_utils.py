from openai import OpenAI
from datetime import date
import json
import os
import time
import logging
from telegram import Bot

# üìç –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
SCHEDULE_FILE = os.path.join(os.path.dirname(__file__), "..", "schedule_2025_unique.json")


def get_topic_for_today() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–º—É –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç RuntimeError.
    """
    today = date.today().isoformat()  # —Ñ–æ—Ä–º–∞—Ç '2025-06-25'

    try:
        with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
            schedule = json.load(f)

        for entry in schedule:
            if entry["date"] == today:
                return entry["topic"]

        logging.error(f"‚õî –ù–µ—Ç —Ç–µ–º—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã: {today}")
        raise RuntimeError("–ù–µ—Ç —Ç–µ–º—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
    except FileNotFoundError:
        logging.critical(f"‚õî –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {SCHEDULE_FILE}")
        raise
    except json.JSONDecodeError as e:
        logging.critical(f"‚õî –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        raise


def generate_travel_post(client: OpenAI) -> tuple[str, str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Å–º–æ—Ç—É—Ä–∏—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Ç–µ–∫—Å—Ç, —Ç–µ–º–∞).
    """
    topic = get_topic_for_today()

    # üìú –ü—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ GPT
    prompt = (
        f"–¢—ã ‚Äî —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π —Ç—Ä–µ–≤–µ–ª-–±–ª–æ–≥–µ—Ä XXIII –≤–µ–∫–∞, –ø–∏—à—É—â–∏–π —Å–µ—Ä–∏—é –∑–∞–º–µ—Ç–æ–∫ –æ –º–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö. "
        f"–ü–æ–¥–µ–ª–∏—Å—å –∫–æ—Ä–æ—Ç–∫–∏–º, –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –ø–æ—Å—Ç–æ–º –¥–ª—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Telegram. "
        f"–õ–æ–∫–∞—Ü–∏—è: {topic}. "
        f"–ü–∏—à–∏ –≤ –∂–∞–Ω—Ä–µ –Ω–∞—É—á–Ω–æ–π —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏, –Ω–æ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏, –∫–∞–∫ –±—É–¥—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ ‚Äî —É–∂–µ –æ–±—ã–¥–µ–Ω–Ω–æ—Å—Ç—å. "
        f"–î–æ–±–∞–≤—å —ç–ª–µ–º–µ–Ω—Ç—ã –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã: –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –º–µ—Å—Ç–æ, –∫–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç, –∫–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤–∞ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä—ã —Ç–∞–º –æ–±–∏—Ç–∞—é—Ç, –∫–∞–∫–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å. "
        f"–ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–π —è–∑—ã–∫, –æ–ø–∏—Å—ã–≤–∞–π —á–µ—Ä–µ–∑ —á—É–≤—Å—Ç–≤–∞ (–∑–∞–ø–∞—Ö, —Å–≤–µ—Ç, –∑–≤—É–∫, –¥–≤–∏–∂–µ–Ω–∏–µ), –Ω–æ –∏–∑–±–µ–≥–∞–π —á—Ä–µ–∑–º–µ—Ä–Ω–æ–π —Ä–æ–º–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏. "
        f"–î–æ 800 —Å–∏–º–≤–æ–ª–æ–≤. –¢–æ–Ω ‚Äî –∂–∏–≤–æ–π, –ª–∏—á–Ω—ã–π, –Ω–µ–º–Ω–æ–≥–æ —É–¥–∏–≤–ª—ë–Ω–Ω—ã–π, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ç–∞–º –ø–æ–±—ã–≤–∞–ª."
    )

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system",
             "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å –∏ —Ç—Ä–µ–≤–µ–ª-–±–ª–æ–≥–µ—Ä XXIII –≤–µ–∫–∞. "
                        "–¢—ã —Å–æ–∑–¥–∞—ë—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ, —è—Ä–∫–∏–µ –ø–æ—Å—Ç—ã –æ –º–µ–∂–ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∏, —É—Å—Ç–∞–≤—à–µ–π –æ—Ç –ó–µ–º–ª–∏ –∏ –º–µ—á—Ç–∞—é—â–µ–π –æ –Ω–æ–≤—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞—Ö. "
                        "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –∂–∏–≤–æ–π, –æ–±—Ä–∞–∑–Ω—ã–π, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π. "
                        "–¢—ã –æ–ø–∏—Å—ã–≤–∞–µ—à—å —Å—Ü–µ–Ω—ã –±—É–¥—É—â–µ–≥–æ —Ç–∞–∫, –±—É–¥—Ç–æ —Å–∞–º —Ç–∞–º –ø–æ–±—ã–≤–∞–ª: –æ—â—É—â–∞–µ—à—å —Å–≤–µ—Ç, –≤–µ—Ç–µ—Ä, –∑–∞–ø–∞—Ö–∏, –∑–≤—É–∫–∏. "
                        "–¢—ã –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–µ—à—å –º–∞–≥–∏—é ‚Äî —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ò–ò, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–µ–µ. "
                        "–ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤, —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏—à–µ –∏ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ –ø–∞—Ñ–æ—Å–∞. "
                        "–¶–µ–ª—å ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å —á–∏—Ç–∞—Ç–µ–ª—è –º–µ—á—Ç–∞—Ç—å –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —ç—Ç–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —É–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.95,
        max_tokens=800
    )

    content = response.choices[0].message.content.strip()

    # ‚õë –£—Å–µ—á—ë–º —Ç–µ–∫—Å—Ç –¥–æ 800 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return content[:800], topic


def generate_image_url(client: OpenAI, topic: str, retries=2) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ –ø–æ—Å—Ç–∞.
    –ü—Ä–∏ —Å–±–æ–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É (URL).
    """
    image_prompt = (
        f"Ultra-realistic high-resolution photograph of a futuristic tourist destination: {topic}. "
        f"Captured on location in the 23rd century by a professional space photographer using a Nikon Z9 camera with a 50mm lens. "
        f"The scene includes detailed architecture, terrain texture, human activity (tourists in advanced spacewear), "
        f"transparent domes, artificial ecosystems, realistic alien landscapes, and atmospheric haze. "
        f"Natural sunlight or local planetary lighting with real-time shadows, soft reflections on surfaces, lens flares from glass or metals, "
        f"dust particles in the air, surface abrasions, environmental effects like wind, mist, or clouds. "
        f"Photographic color palette, cinematic tone, documentary-style framing (mid-distance, natural angle, depth-of-field). "
        f"Avoid stylized art, no painting, no illustration, no concept art, no CGI or 3D rendering, no surreal elements, no unrealistic symmetry."
    )

    for attempt in range(1, retries + 1):
        try:
            logging.info(f"üñº –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {attempt}...")
            response = client.images.generate(
                model="dall-e-3",
                prompt=image_prompt,
                size="1024x1024",
                quality="hd",
                n=1
            )
            return response.data[0].url
        except Exception as e:
            logging.warning(f"‚õî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
            if attempt < retries:
                time.sleep(5)
            else:
                logging.error("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å.")
                return "https://dummyimage.com/1024x1024/000/fff&text=No+Image+Available"


# === üì¶ –°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ trigger.py) ===
def send_post_to_telegram(client: OpenAI, bot: Bot, chat_id: int) -> None:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –±–µ–∑ async, –Ω–∞–ø—Ä–∏–º–µ—Ä trigger.py.
    """
    try:
        text, topic = generate_travel_post(client)
        image_url = generate_image_url(client, topic)

        message = f"<b>{topic}</b>\n\n{text}"

        bot.send_photo(
            chat_id=chat_id,
            photo=image_url,
            caption=message,
            parse_mode='HTML'
        )

        logging.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {topic}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ Telegram (sync): {e}")
        raise


# === ‚ö° –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ bot.py) ===
async def send_post_to_telegram_async(client: OpenAI, bot: Bot, chat_id: int) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä Telegram-–±–æ—Ç–µ.
    """
    try:
        text, topic = generate_travel_post(client)
        image_url = generate_image_url(client, topic)

        message = f"<b>{topic}</b>\n\n{text}"

        await bot.send_photo(
            chat_id=chat_id,
            photo=image_url,
            caption=message,
            parse_mode='HTML'
        )

        logging.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {topic}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ Telegram (async): {e}")
        raise
